/** * @file: GALParser.jj * @author: hackwaly *//*TODO: determine whether galaxy support "<<" ">>" ">>>" operators.TODO: more about galaxy and c different.TODO: AST output.*/options{  STATIC = false;  UNICODE_INPUT = true;  JAVA_UNICODE_ESCAPE = false;  GENERATE_GENERICS = true;  NODE_PREFIX = "AST";  NODE_CLASS = "GALNode";  NODE_DEFAULT_VOID = true;  MULTI = true;}PARSER_BEGIN(GALParser)package org.zhjh.galaxykit.parser;public class GALParser{  public static void main(String [] args)  {    GALParser parser = new GALParser(System.in);    try    {      parser.Program();    }    catch (ParseException ex)    {      System.out.println(ex.toString());    }  }}PARSER_END(GALParser)SKIP :{  " "| "\t"| "\r"| "\n"| < "//" (~[ "\r", "\n" ])* ("\r")? "\n" >}TOKEN :{  < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < BREAK : "break" >| < CONTINUE : "continue" >| < VOID : "void" >| < BOOL : "bool" >| < INT : "int" >| < FIXED : "fixed" >| < STRING : "string" >| < STRUCT : "struct" >| < CONST : "const" >| < NATIVE : "native" >| < INCLUDE : "include" >| < RETURN : "return" >| < TRUE : "true" >| < FALSE : "false" >| < NULL : "null" >| < DIV : "/" >}TOKEN :{  < INTEGER_LITERAL : < DECIMAL_INTEGER > >| < #DECIMAL_INTEGER :    "0"  | [ "1"-"9" ] ([ "0"-"9" ])* >| < FLOAT_LITERAL : < DECIMAL_INTEGER > "." ([ "0"-"9" ])+ >| < STRING_LITERAL :    "\""    (      ~[ "\\", "\"" ]    | "\\" ~[ ]    )*    "\"" >}TOKEN :{  < IDENTIFIER : < IDENTIFIER_START > (< IDENTIFIER_PART >)* >| < #IDENTIFIER_START : [ "a"-"z", "A"-"Z", "_" ] >| < #IDENTIFIER_PART :    < IDENTIFIER_START >  | [ "0"-"9" ] >}/***************************** * Syntax Grammar Start Here * *****************************/GALNode getAST() #Root :{}{  Program()  {    return jjtThis;  }}void Program() :{}{  (    LOOKAHEAD(3)    FunctionDefinition()  | LOOKAHEAD(2)    VariableDefinition()  | StructDefinition()  | IncludeDeclaration()  | Statement()  )*  < EOF >}void IncludeDeclaration() :{}{  "include" < STRING_LITERAL >}void VariableDefinition() :{}{  Type() Identifier() [ "=" Expression() ] ";"}void VariableDeclaration() :{}{  Type() Identifier() ";"}void StructDefinition() :{}{  "struct" Identifier() "{"  (    VariableDeclaration()  )+  "}"}void FormalParameter() :{}{  Type() Identifier()}void FormalParameterList() :{}{  "void"|  [    FormalParameter()    (      "," FormalParameter()    )*  ]}void FunctionDefinition() :{}{  (    Type()  | "void"  )  Identifier() "(" FormalParameterList() ")" FunctionBody()}void FunctionBody() :{}{  "{"  (    LOOKAHEAD(2)    VariableDefinition()  )*  (    Statement()  )*  "}"}void Block() :{}{  "{"  (    Statement()  )*  "}"}void Statement() :{}{  LOOKAHEAD(3)  ExpressionStatement()| IfStatement()| WhileStatement()| AssignmentStatement()| EmptyStatement()| ReturnStatement()| BreakStatement()| ContinueStatement()}void ExpressionStatement() :{}{  Expression() ";"}void EmptyStatement() :{}{  ";"}void ReturnStatement() :{}{  "return" [ Expression() ] ";"}void BreakStatement() :{}{  "break" ";"}void ContinueStatement() :{}{  "continue" ";"}void AssignmentStatement() :{}{  LeftHandSideExpression()  (    "="  | "+="  | "-="  | "*="  | "/="  | "%="  | "&="  | "^="  | "|="  )  Expression() ";"}void IfStatement() :{}{  "if" "(" Expression() ")" Block() [ "else" Block() ]}void WhileStatement() :{}{  "while" "(" Expression() ")" Block()}void PrimaryExpression() :{}{  StringLiteral()| IntegerLiteral()| FloatLiteral()| BooleanLiteral()| HandleLiteral()| LOOKAHEAD(2)  CallExpression()| Identifier()| "(" Expression() ")"}void UnaryExpression() :{}{  (    "&"  | "*"  | "!"  | "~"  )*  PrimaryExpression()}void Arguments() :{}{  Expression()  (    "," Expression()  )*}void CallExpression() :{}{  Identifier() "(" [ Arguments() ] ")"}void LeftHandSideExpression() :{}{  MemberExpression()}void MemberExpression() :{}{  UnaryExpression()  (    (      "."    | "->"    )    Identifier()  )*}void MultiplicativeExpression() :{}{  MemberExpression()  (    (      "*"    | "/"    | "%"    )    MemberExpression()  )*}void AdditiveExpression() :{}{  MultiplicativeExpression()  (    (      "+"    | "-"    )    MultiplicativeExpression()  )*}void RelationExpression() :{}{  AdditiveExpression()  (    (      ">"    | "<"    | ">="    | "<="    )  )*}void EqualityExpression() :{}{  RelationExpression()  (    (      "=="    | "!="    )    RelationExpression()  )*}void BitwiseANDExpression() :{}{  EqualityExpression()  (    "&" EqualityExpression()  )*}void BitwiseXORExpression() :{}{  EqualityExpression()  (    "^" EqualityExpression()  )*}void BitwiseORExpression() :{}{  BitwiseXORExpression()  (    "|" BitwiseXORExpression()  )*}void LogicalANDExpression() :{}{  BitwiseORExpression()  (    "&&" BitwiseORExpression()  )*}void LogicalORExpression() :{}{  LogicalANDExpression()  (    "||" LogicalANDExpression()  )*}void Expression() :{}{  LogicalORExpression()}void Type() :{}{  (    < BOOL >  | < INT >  | < FIXED >  | < STRING >  | Identifier()  )  (    "[" IntegerLiteral() "]"  )*  ("*")*}void BooleanLiteral() :{}{  < TRUE >| < FALSE >}void StringLiteral() :{}{  < STRING_LITERAL >}void IntegerLiteral() :{}{  < INTEGER_LITERAL >}void FloatLiteral() :{}{  < FLOAT_LITERAL >}void HandleLiteral() :{}{  < NULL >}void Identifier() :{}{  < IDENTIFIER >}