options{  STATIC = false;}PARSER_BEGIN(GALParser)package org.zhjh.galaxykit.parser;public class GALParser{  public static void main(String [] args)  {  	  GALParser parser = new GALParser(System.in);  	  try {  	    parser.Program();  	  } catch (ParseException ex) {  	    System.out.println(ex.toString());  	  }  }}PARSER_END(GALParser)SKIP :{  " "| "\t"| "\r"| "\n"| < "\\" (~[ "\r", "\n" ])* ("\r")? "\n" >}TOKEN :{  < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < VOID : "void" >| < BOOL : "bool" >| < INT : "int" >| < FIXED : "fixed" >| < STRING : "string" >| < CONST : "const" >| < NATIVE : "native" >| < RETURN : "return" >| < TRUE : "true" >| < FALSE : "false" >| < NULL : "null" >}TOKEN :{  < INTEGER_LITERAL : ([ "0"-"9" ])+ >| < FLOAT_LITERAL : "." >| < STRING_LITERAL : "\"" "\"" >}TOKEN :{  < IDENTIFIER : < IDENTIFIER_START > (< IDENTIFIER_PART >)* >| < #IDENTIFIER_START : [ "a"-"z", "A"-"Z", "_" ] >| < #IDENTIFIER_PART :    < IDENTIFIER_START >  | [ "0"-"9" ] >}/***************************** * Syntax Grammar Start Here * *****************************/void Program() :{}{  (    LOOKAHEAD(3)    FunctionDefinition()  | LOOKAHEAD(2)    VariableDefinition()  | Statement()  )*}void Block() :{}{  "{" (Statement())* "}"}void Statement() :{}{  AssignmentStatement()| IfStatement()}void AssignmentStatement() :{}{  LeftHandSideExpression() "=" Expression()}void LeftHandSideExpression() :{}{  Identifier()}void IfStatement() :{}{  "if" "(" Expression() ")" Block() [ "else" Block() ]}void Expression() :{}{  PrimaryExpression()}void PrimaryExpression() :{}{  StringLiteral()| IntegerLiteral()| FloatLiteral()| BooleanLiteral()| HandleLiteral()}void FunctionDefinition() :{}{  Type() Identifier() "{" "}"}void Type() :{}{  (    < BOOL >  | < INT >  | < FIXED >  | < STRING >  | Identifier()  )  "[" IntegerLiteral() "]"}void BooleanLiteral() :{}{  < TRUE >| < FALSE >}void StringLiteral() :{}{  < STRING_LITERAL >}void IntegerLiteral() :{}{  < INTEGER_LITERAL >}void FloatLiteral() :{}{  < FLOAT_LITERAL >}void HandleLiteral() :{}{  < NULL >}void Identifier() :{}{  < IDENTIFIER >}void VariableDefinition() :{}{  Type() Identifier() ";"}